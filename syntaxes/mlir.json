{
  "fileTypes":[
    "mlir"
  ],
  "repository":{
    "attribute":{
      "match":"\\W[\\w_][\\w\\d_.$]*\\s*=",
      "name":"meta.attribute.mlir"
    },
    "branch_target":{
      "match":"\\^bb[\\w\\d_$\\.-]+",
      "name":"entity.name.label.mlir"
    },
    "comment":{
      "match":"\/\/.*$",
      "name":"comment.line.double-slash.mlir"
    },
    "identifier":{
      "match":"[\\%#@][\\w_][\\w\\d_.$]*",
      "captures":{
        "0":{
          "name":"variable.mlir"
        }
      },
      "name":"meta.identifier.mlir"
    },
    "integer":{
      "match":"[\\W]([0-9]+)(?!x|[0-9])",
      "captures":{
        "1":{
          "name":"constant.numeric.mlir"
        }
      },
      "name":"meta.identifier.mlir"
    },
    "string":{
      "end":"\"",
      "begin":"\"",
      "beginCaptures":{
        "0":{
          "name":"punctuation.definition.string.begin.mlir"
        }
      },
      "patterns":[
        {
          "match":"\\\\[nt\"]",
          "name":"constant.character.escape.mlir"
        },
        {
          "match":"\\\\.",
          "name":"invalid.illegal.mlir"
        }
      ],
      "endCaptures":{
        "0":{
          "name":"punctuation.definition.string.end.mlir"
        }
      },
      "name":"string.quoted.double.mlir"
    },
    "types":{
      "match":"\\b(index|i[1-9][0-9]*|f16|bf16|f32|f64|u8|memref|tensor|vector)\\b",
      "captures":{
        "1":{
          "name":"storage.type.mlir"
        }
      },
      "name":"meta.types.simple.mlir"
    },
    "memref-size":{
      "match":"(?<=\\W)(((\\?|[1-9][0-9]*)x)*)(i[1-9][0-9]*|f16|bf16|f32|f64|u8)\\b",
      "name":"storage.type.mlir.size"
    },
    "affine-for": {
      "match": "\\baffine\\.for\\b",
      "name":"entity.name.function.mlir.affine-for"
    },
    "affine-apply":{
      "match": "\\baffine\\.apply\\b",
      "name":"entity.name.function.mlir.affine-apply"
    },
    "affine-if":{
      "match": "\\baffine\\.if\\b",
      "name": "entity.name.function.mlir.affine-if"
    },
    "affine-else":{
      "match": "\\belse\\b",
      "name": "entity.name.function.mlir.affine-else"
    },
    "affine-load":{
      "match":"\\baffine\\.load\\b",
      "name":"entity.name.function.mlir.affine-load"
    },
    "affine-store":{
      "match": "\\baffine\\.store\\b",
      "name": "entity.name.function.mlir.affine-store"
    },
    "affine-dma_start":{
      "match": "\\baffine\\.dma_start\\b",
      "name": "entity.name.function.mlir.affine-dma_start"
    },
    "affine-dma_wait":{
      "match": "\\baffine\\.dma_wait\\b",
      "name":"entity.name.function.mlir.affine-dma_wait"
    },
    "affine-min":{
      "match": "\\baffine\\.min\\b",
      "name":"entity.name.function.mlir.affine-min"
    },
    "affine-max":{
      "match": "\\baffine\\.max\\b",
      "name": "entity.name.function.mlir.affine-max"
    },
    "affine-parallel":{
      "match": "\\baffine\\.parallel\\b",
      "name": "entity.name.function.mlir.affine-parallel"
    },
    "affine-prefetch":{
      "match": "\\baffine\\.prefetch\\b",
      "name": "entity.name.function.mlir.affine-prefetch"
    },
    "affine_map":{
      "match": "\\baffine_map\\b",
      "name": "entity.name.function.mlir.affine_map"
    },
    "affine_set":{
      "match": "\\baffine_set\\b",
      "name": "entity.name.function.mlir.affine_set"
    },
    "CHECK":{
      "match":"(\/\/)\\s*(CHECK\\s*:|CHECK-\\w+\\s*:)(.*)$",
      "captures":{
        "1":{
          "name": "comment.line.double-slash.mlir"
        },
        "2":{
          "name": "comment.other.CHECK.mlir"
        },
        "3":{
          "patterns":[{
            "include": "#CHECK-CODE"
          }]
        },
        "name": "comment.other.CHECK.mlir"
      }
    },
    "CHECK-CODE":{
      "match":"([^0-9a-zA-Z%\"]*)?([0-9a-zA-Z\"\\.%_\\-]*)([^0-9a-zA-Z\"\\.%_\\-].*)?$",
      "captures":{
        "1":{
          "name": "comment.line.double-slash.mlir"
        },
        "2":{
          "patterns":[{
            "include": "$self"
          },
          {
            "match":"(\\b|x)(index|i[1-9][0-9]*|f16|bf16|f32|f64|u8|memref|tensor|vector|func)\\b",
            "captures":{
              "1":{
                "name": "comment.line.double-slash.mlir"
              },
              "2":{
                "name":"storage.type.mlir"
              }
            }
          },
          {
            "match":"\\b([0-9]+)(x.*)?",
            "captures":{
              "1":{
                "name":"constant.numeric.mlir"
              },
              "2":{
                "patterns":[{
                  "include": "$self"
                }]
              }
            }
          },
          {
            "match":"(.*)",
            "name": "comment.line.double-slash.mlir"
          }]
        },
        "3":{
          "patterns":[{
            "include": "#CHECK-CODE"
          }]
        }
      }
    },
    "llvmType":{
      "match":"(^!llvm|\\s!llvm)[\\.<]",
      "captures":{
        "1":{
          "name": "variable.mlir"
        }
      },
      "name": "meta.types.llvm.mlir"
    },
    "llvmFunc":{
      "match":"\\bllvm\\.func\\b",
      "name": "keyword.function.llvm"
    },
    "llvmReturn":{
      "match": "\\bllvm\\.return\\b",
      "name": "keyword.return.llvm"
    },
    "llvmIntArith":{
      "match": "\\bllvm\\.(add|sub|mul|udiv|sdiv|urem|srem)\\b",
      "name":"entity.name.function.mlir.llvmIntArithm"
    },
    "llvmFloatArith":{
      "match": "\\bllvm\\.(fadd|fsub|fmul|fdiv|frem)\\b",
      "name": "entity.name.function.mlir.llvmFloatArith"
    },
    "llvmMemOp":{
      "match": "\\bllvm\\.(alloca|getelementptr|load|store)\\b",
      "name": "entity.name.function.mlir.llvmMemOp"
    },
    "llvmAggregateOp":{
      "match": "\\bllvm\\.(extractvalue|insertvalue)\\b",
      "name":"entity.name.function.mlir.llvmAggregateOp"
    },
    "llvmTerminatorOp":{
      "match": "\\bllvm\\.(br|cond_br|call)\\b",
      "name":"entity.name.function.mlir.llvmTerminatorOp"
    },
    "llvmComparison":{
      "match":"\\bllvm\\.(eq|ne|slt|sle|sgt|sge|ult|ule|ugt|uge|bitcast|select)\\b",
      "name":"entity.name.function.mlir.llvmComparison"
    },
    "llvmMLIR":{
      "match":"\\b(llvm\\.mlir\\.)((addressof|constant|global|null|undef))",
      "captures":{
        "1":{
          "name":"keyword.other.llvm"
        },
        "2":{
          "name":"entity.name.function.mlir.auxilary"
        }
      },
      "name":"meta.llvm.mlirAuxilary"
    }
  },
  "patterns":[
    {
      "match":"\\b(func)\\b\\s*(@[\\w_][\\w\\d_.$]*)",
      "captures":{
        "1":{
          "name":"keyword.function.mlir"
        },
        "2":{
          "name":"entity.name.function.mlir"
        }
      },
      "name":"support.function.mlir"
    },
    {
      "match":"\\b(attributes|br|call|constant|loc|return)\\b",
      "name":"keyword.module.mlir"
    },
    {
      "include":"#identifier"
    },
    {
      "include":"#branch_target"
    },
    {
      "include":"#attribute"
    },
    {
      "include":"#memref-size"
    },
    {
      "include":"#types"
    },
    {
      "include":"#integer"
    },
    {
      "include":"#affine-for"
    },
    {
      "include":"#affine-apply"
    },
    {
      "include":"#affine-if"
    },
    {
      "include":"#affine-else"
    },
    {
      "include": "#affine-load"
    },
    {
      "include": "#affine-store"
    },
    {
      "include": "#affine-dma_start"
    },
    {
      "include": "#affine-dma_wait"
    },
    {
      "include": "#affine-min"
    },
    {
      "include": "#affine-max"
    },
    {
      "include":"#affine-parallel"
    },
    {
      "include":"#affine-prefetch"
    },
    {
      "include":"#affine_map"
    },
    {
      "include":"#affine_set"
    },
    {
      "include":"#CHECK"
    },
    {
      "include":"#llvmType"
    },
    {
      "include": "#llvmFunc"
    },
    {
      "include": "#llvmReturn"
    },
    {
      "include": "#llvmIntArith"
    },
    {
      "include": "#llvmFloatArith"
    },
    {
      "include": "#llvmMemOp"
    },
    {
      "include": "#llvmAggregateOp"
    },
    {
      "include": "#llvmTerminatorOp"
    },
    {
      "include": "#llvmComparison"
    },
    {
      "include": "#llvmMLIR"
    },
    {
      "include":"#comment"
    },
    {
      "include":"#string"
    }
  ],
  "name":"MLIR",
  "scopeName":"source.mlir"
}

